sudo: required
services:
  - docker

language: python
rvm:
  - 3.6.7

env:
  global:
    - DOCKER_COMPOSE_VERSION=3
    - GOOGLE_APPLICATION_CREDENTIALS=~/client-secret.json
    - PROJECT_PROD=utility-logic-238209
    - CLUSTER=rts-cluster
    - ZONE=europe-west3-a
    - LOCAL_SCRIPT_IMAGE=rts_script:v0.1
    - LOCAL_SITE_IMAGE=rts_site:v0.1
    - SCRIPT_IMAGE=script
    - SITE_IMAGE=site
    - MONGO_IMAGE=mongo
    - MQTT_IMAGE=eclipse-mosquitto
    - SCRIPT_DEPLOYMENT=script-deploy
    - SITE_DEPLOYMENT=site-deploy
    - MONGO_DEPLOYMENT=db-deploy
    - MQTT_DEPLOYMENT=mqtt-deploy
    - SCRIPT_CONTAINER=script-container
    - SITE_CONTAINER=site-container
    - MONGO_CONTAINER=db-container
    - MQTT_CONTAINER=mqtt-container

script:
  - docker-compose up -d
  - docker ps

after_success:
  # [START auth]
  # Decrypt the credentials we added to the repo using the key we added with the Travis command line tool
  - "openssl aes-256-cbc -K $encrypted_6cbe24f4105f_key -iv $encrypted_6cbe24f4105f_iv -in credentials.tar.gz.enc -out credentials.tar.gz -d"
  # If the SDK is not already cached, download it and unpack it
  - if [ ! -d ${HOME}/google-cloud-sdk ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
  - tar -xzf credentials.tar.gz
  - mkdir -p lib
  # Here we use the decrypted service account credentials to authenticate the command line tool
  - gcloud auth activate-service-account --key-file client-secret.json
  # [END auth]

before_deploy:
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - gcloud --quiet version
  - gcloud --quiet components update
  - gcloud --quiet components update kubectl

deploy:
  - provider: script
    script: chmod +x gcloud/deploy.sh && gcloud/deploy.sh
    skip_cleanup: true
    on:
      all_branches: true

after_script:
  - docker-compose stop
  - docker-compose rm -f
